<?php

class Picqer_PostNL_Model_Sales_Order_Api extends Mage_Sales_Model_Order_Api
{

    /**
     * API call returns PostNL shipping info generated by TIG_PostNL
     *
     * @param $orderIncrementId
     *
     * @return array
     */
    public function picqerPostNL($orderIncrementId)
    {
        $helper = Mage::helper('picqer_postnl');

        if (! $helper->isExtensionActive() || ! $helper->isTIGPostNlExtensionInstalled()) {
            return array();
        }

        try {
            $order = $this->_initOrder($orderIncrementId);
            $postNLHelper = Mage::helper('postnl');
            $pakjeGemakAddress = $postNLHelper->getPakjeGemakAddressForOrder($order);
            $tigPostNlOrder = Mage::getModel('postnl_core/order')->loadByOrder($order);

            // If there is not PostNLOrder based on the orderId, try based on the quoteId
            if (is_null($tigPostNlOrder->orderId) && ! is_null($order->getQuoteId())) {
                $quote = Mage::getModel('sales/quote')->setStoreId($order->getStoreId())->load($order->getQuoteId());
                $tigPostNlOrder = Mage::getModel('postnl_core/order')->loadByQuote($quote);
                if (is_null($tigPostNlOrder->quoteId)) {
                    return array('error' => 'No orderId and no quoteId found');
                }
            }

            return $this->formatApiResponse($tigPostNlOrder, $pakjeGemakAddress, $order);
        } catch (\Exception $e) {
            return array();
        }
    }


    /**
     * Change the time zone of a date and time
     *
     * @param $value
     * @param DateTimeZone $dateTimeZone
     *
     * @return DateTime
     */
    private function toCorrectTimeZone($value, DateTimeZone $dateTimeZone)
    {
        $dateTime = new DateTime($value);
        $dateTime->setTimezone($dateTimeZone);

        return $dateTime;
    }

    /**
     * Determine if this is a cash on delivery order
     * @param $order
     * @return bool
     */
    private function isCod($order)
    {
        $codPaymentMethods = Mage::helper('postnl/payment')->getCodPaymentMethods();
        $paymentMethod = $order->getPayment()->getMethod();
        if (in_array($paymentMethod, $codPaymentMethods)) {
            return true;
        }

        return false;
    }

    /**
     * Are we allowed to use Buspakje by preferences from Magento
     * @return mixed
     */
    private function canUseBuspakje()
    {
        return Mage::helper('postnl')->canUseBuspakje();
    }

    /**
     * Does the order fit as a Buspakje
     * @param $order
     * @return mixed
     */
    private function fitsAsBuspakje($order)
    {
        $orderItems = $order->getItemsCollection();
        return Mage::helper('postnl')->fitsAsBuspakje($orderItems, true);
    }

    /**
     * Is this a Dutch shipment
     * @param $order
     * @return bool
     */
    private function isDutchShipment($order)
    {
        return $order->getShippingAddress()->getCountry() == 'NL';
    }


    /**
     * Calculate if this should be a buspakje shipment
     * @param $order
     * @param $tigOrder
     * @return bool
     */
    private function useBuspakje($order, $tigOrder)
    {
        return $this->isDutchShipment($order)
            && ! $this->isCod($order)
            && ! $tigOrder->getIsPakjeGemak()
            && ! $tigOrder->getIsPakketautomaat()
            && $this->fitsAsBuspakje($order)
            && $this->canUseBuspakje();
    }

    /**
     * @param $tigPostNlOrder
     * @return DateTimeZone
     */
    private function getStoreTimeZone($tigPostNlOrder)
    {
        $storeTimezone = Mage::getStoreConfig(Mage_Core_Model_Locale::XML_PATH_DEFAULT_TIMEZONE, $tigPostNlOrder->getStoreId());
        $storeTimezone = new DateTimeZone($storeTimezone);

        return $storeTimezone;
    }

    /**
     * @param $tigPostNlOrder
     * @param $pakjeGemakAddress
     * @param $order
     * @return array
     */
    private function formatApiResponse($tigPostNlOrder, $pakjeGemakAddress, $order) {
        $storeTimezone = $this->getStoreTimeZone($tigPostNlOrder);
        $expectedDeliveryTimeEnd = $this->getDeliveryTimeEnd($tigPostNlOrder);

        $result = array(
            'confirmDate' => $this->toCorrectTimeZone($tigPostNlOrder->getConfirmDate(), $storeTimezone)->format('Y-m-d H:i:s'),
            'isActive' => $tigPostNlOrder->getIsActive(),
            'shipmentCosts' => $tigPostNlOrder->getShipmentCosts(),
            'productCode' => $tigPostNlOrder->getProductCode(),
            'isPakjeGemak' => $tigPostNlOrder->getIsPakjeGemak(),
            'isCanceled' => $tigPostNlOrder->getIsCanceled(),
            'deliveryDate' => $this->toCorrectTimeZone($tigPostNlOrder->getDeliveryDate(), $storeTimezone)->format('Y-m-d H:i:s'),
            'type' => $tigPostNlOrder->getType(),
            'mobilePhoneNumber' => $tigPostNlOrder->getMobilePhoneNumber(),
            'isPakketautomaat' => $tigPostNlOrder->getIsPakketautomaat(),
            'options' => $tigPostNlOrder->getUnserializedOptions(),
            'expectedDeliveryTimeStart' => $this->toCorrectTimeZone($tigPostNlOrder->getExpectedDeliveryTimeStart(), $storeTimezone)->format('H:i'),
            'expectedDeliveryTimeEnd' => $expectedDeliveryTimeEnd,
            'pakjeGemakAddress' => empty($pakjeGemakAddress) ? null : $this->_getAttributes($pakjeGemakAddress, 'global'),
            'isBrievenbuspakje' => $this->useBuspakje($order, $tigPostNlOrder),
        );

        return $result;
    }

    /**
     * @param $tigPostNlOrder
     * @return null|string
     */
    private function getDeliveryTimeEnd($tigPostNlOrder)
    {
        $storeTimezone = $this->getStoreTimeZone($tigPostNlOrder);

        $expectedDeliveryTimeEnd = null;
        if ($tigPostNlOrder->hasExpectedDeliveryTimeEnd()) {
            $expectedDeliveryTimeEnd = $this->toCorrectTimeZone($tigPostNlOrder->getExpectedDeliveryTimeEnd(),
                $storeTimezone)->format('H:i');
        }

        return $expectedDeliveryTimeEnd;
    }
}
